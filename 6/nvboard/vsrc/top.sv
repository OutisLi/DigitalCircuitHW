// Generated by CIRCT firtool-1.66.0
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module shiftReg(	// @[src/main/scala/shiftReg/shiftReg.scala:6:7]
  input        clock,	// @[src/main/scala/shiftReg/shiftReg.scala:6:7]
               reset,	// @[src/main/scala/shiftReg/shiftReg.scala:6:7]
               io_in,	// @[src/main/scala/shiftReg/shiftReg.scala:7:14]
  input  [2:0] io_control,	// @[src/main/scala/shiftReg/shiftReg.scala:7:14]
  input  [7:0] io_init,	// @[src/main/scala/shiftReg/shiftReg.scala:7:14]
  output [7:0] io_out	// @[src/main/scala/shiftReg/shiftReg.scala:7:14]
);

  reg [7:0] state;	// @[src/main/scala/shiftReg/shiftReg.scala:14:22]
  reg [7:0] casez_tmp;	// @[src/main/scala/shiftReg/shiftReg.scala:15:33, :16:11, :17:39]
  always_comb begin	// @[src/main/scala/shiftReg/shiftReg.scala:14:22, :15:{19,33}, :16:11, :17:{25,39}, :18:11, :19:{25,39}, :20:11, :21:{25,39}, :22:11, :23:{25,39}, :24:11, :25:{25,39}, :26:11, :27:{25,39}, :28:11, :29:{25,39}, :30:11]
    casez (io_control)	// @[src/main/scala/shiftReg/shiftReg.scala:14:22, :15:{19,33}, :16:11, :17:{25,39}, :18:11, :19:{25,39}, :20:11, :21:{25,39}, :22:11, :23:{25,39}, :24:11, :25:{25,39}, :26:11, :27:{25,39}, :28:11, :29:{25,39}, :30:11]
      3'b000:
        casez_tmp = 8'h0;	// @[src/main/scala/shiftReg/shiftReg.scala:14:22, :15:{19,33}, :16:11, :17:{25,39}, :18:11, :19:{25,39}, :20:11, :21:{25,39}, :22:11, :23:{25,39}, :24:11, :25:{25,39}, :26:11, :27:{25,39}, :28:11, :29:{25,39}, :30:11]
      3'b001:
        casez_tmp = io_init;	// @[src/main/scala/shiftReg/shiftReg.scala:14:22, :15:{19,33}, :16:11, :17:{25,39}, :18:11, :19:{25,39}, :20:11, :21:{25,39}, :22:11, :23:{25,39}, :24:11, :25:{25,39}, :26:11, :27:{25,39}, :28:11, :29:{25,39}, :30:11]
      3'b010:
        casez_tmp = {1'h0, state[7:1]};	// @[src/main/scala/shiftReg/shiftReg.scala:6:7, :14:22, :15:{19,33}, :16:11, :17:{25,39}, :18:11, :19:{25,39}, :20:{11,17,33}, :21:{25,39}, :22:11, :23:{25,39}, :24:11, :25:{25,39}, :26:11, :27:{25,39}, :28:11, :29:{25,39}, :30:11]
      3'b011:
        casez_tmp = {state[6:0], 1'h0};	// @[src/main/scala/shiftReg/shiftReg.scala:6:7, :14:22, :15:{19,33}, :16:11, :17:{25,39}, :18:11, :19:{25,39}, :20:11, :21:{25,39}, :22:{11,17,23}, :23:{25,39}, :24:11, :25:{25,39}, :26:11, :27:{25,39}, :28:11, :29:{25,39}, :30:11]
      3'b100:
        casez_tmp = {state[7], state[7:1]};	// @[src/main/scala/shiftReg/shiftReg.scala:14:22, :15:{19,33}, :16:11, :17:{25,39}, :18:11, :19:{25,39}, :20:11, :21:{25,39}, :22:11, :23:{25,39}, :24:{11,17,23,33}, :25:{25,39}, :26:11, :27:{25,39}, :28:11, :29:{25,39}, :30:11]
      3'b101:
        casez_tmp = {io_in, state[7:1]};	// @[src/main/scala/shiftReg/shiftReg.scala:14:22, :15:{19,33}, :16:11, :17:{25,39}, :18:11, :19:{25,39}, :20:11, :21:{25,39}, :22:11, :23:{25,39}, :24:11, :25:{25,39}, :26:{11,17,30}, :27:{25,39}, :28:11, :29:{25,39}, :30:11]
      3'b110:
        casez_tmp = {state[0], state[7:1]};	// @[src/main/scala/shiftReg/shiftReg.scala:14:22, :15:{19,33}, :16:11, :17:{25,39}, :18:11, :19:{25,39}, :20:11, :21:{25,39}, :22:11, :23:{25,39}, :24:11, :25:{25,39}, :26:11, :27:{25,39}, :28:{11,17,23,33}, :29:{25,39}, :30:11]
      default:
        casez_tmp = {state[6:0], state[7]};	// @[src/main/scala/shiftReg/shiftReg.scala:14:22, :15:{19,33}, :16:11, :17:{25,39}, :18:11, :19:{25,39}, :20:11, :21:{25,39}, :22:11, :23:{25,39}, :24:11, :25:{25,39}, :26:11, :27:{25,39}, :28:11, :29:{25,39}, :30:{11,17,23,36}]
    endcase	// @[src/main/scala/shiftReg/shiftReg.scala:14:22, :15:{19,33}, :16:11, :17:{25,39}, :18:11, :19:{25,39}, :20:11, :21:{25,39}, :22:11, :23:{25,39}, :24:11, :25:{25,39}, :26:11, :27:{25,39}, :28:11, :29:{25,39}, :30:11]
  end // always_comb
  always @(posedge clock) begin	// @[src/main/scala/shiftReg/shiftReg.scala:6:7]
    if (reset)	// @[src/main/scala/shiftReg/shiftReg.scala:6:7]
      state <= 8'h0;	// @[src/main/scala/shiftReg/shiftReg.scala:14:22]
    else	// @[src/main/scala/shiftReg/shiftReg.scala:6:7]
      state <= casez_tmp;	// @[src/main/scala/shiftReg/shiftReg.scala:14:22, :15:33, :16:11, :17:39]
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_	// @[src/main/scala/shiftReg/shiftReg.scala:6:7]
    `ifdef FIRRTL_BEFORE_INITIAL	// @[src/main/scala/shiftReg/shiftReg.scala:6:7]
      `FIRRTL_BEFORE_INITIAL	// @[src/main/scala/shiftReg/shiftReg.scala:6:7]
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:0];	// @[src/main/scala/shiftReg/shiftReg.scala:6:7]
    initial begin	// @[src/main/scala/shiftReg/shiftReg.scala:6:7]
      `ifdef INIT_RANDOM_PROLOG_	// @[src/main/scala/shiftReg/shiftReg.scala:6:7]
        `INIT_RANDOM_PROLOG_	// @[src/main/scala/shiftReg/shiftReg.scala:6:7]
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT	// @[src/main/scala/shiftReg/shiftReg.scala:6:7]
        _RANDOM[/*Zero width*/ 1'b0] = `RANDOM;	// @[src/main/scala/shiftReg/shiftReg.scala:6:7]
        state = _RANDOM[/*Zero width*/ 1'b0][7:0];	// @[src/main/scala/shiftReg/shiftReg.scala:6:7, :14:22]
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL	// @[src/main/scala/shiftReg/shiftReg.scala:6:7]
      `FIRRTL_AFTER_INITIAL	// @[src/main/scala/shiftReg/shiftReg.scala:6:7]
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  assign io_out = state;	// @[src/main/scala/shiftReg/shiftReg.scala:6:7, :14:22]
endmodule

module LFSR(	// @[src/main/scala/LFSR/LFSR.scala:7:7]
  input        clock,	// @[src/main/scala/LFSR/LFSR.scala:7:7]
               reset,	// @[src/main/scala/LFSR/LFSR.scala:7:7]
  input  [2:0] io_control,	// @[src/main/scala/LFSR/LFSR.scala:8:14]
  input  [7:0] io_seed,	// @[src/main/scala/LFSR/LFSR.scala:8:14]
  output [7:0] io_out	// @[src/main/scala/LFSR/LFSR.scala:8:14]
);

  wire [7:0] _shiftReg_io_out;	// @[src/main/scala/LFSR/LFSR.scala:16:26]
  shiftReg shiftReg (	// @[src/main/scala/LFSR/LFSR.scala:16:26]
    .clock      (clock),
    .reset      (reset),
    .io_in
      (_shiftReg_io_out[4] ^ _shiftReg_io_out[3] ^ _shiftReg_io_out[2]
       ^ _shiftReg_io_out[0]),	// @[src/main/scala/LFSR/LFSR.scala:16:26, :18:{43,47,64,68,85,89,106}]
    .io_control (io_control),
    .io_init    (io_seed),
    .io_out     (_shiftReg_io_out)
  );	// @[src/main/scala/LFSR/LFSR.scala:16:26]
  assign io_out = io_seed == 8'h0 ? 8'h0 : _shiftReg_io_out;	// @[src/main/scala/LFSR/LFSR.scala:7:7, :13:{16,25}, :14:12, :16:26, :20:25]
endmodule

module led(	// @[src/main/scala/LED/led.scala:6:7]
  input  [3:0] io_in,	// @[src/main/scala/LED/led.scala:7:14]
  output [6:0] io_out	// @[src/main/scala/LED/led.scala:7:14]
);

  reg  [6:0] casez_tmp;	// @[src/main/scala/LED/led.scala:11:23, :12:12, :13:29]
  wire [6:0] _GEN = {3'h0, io_in != 4'hE, 3'h6};	// @[src/main/scala/LED/led.scala:39:{20,30}, :40:12, :42:12]
  always_comb begin	// @[src/main/scala/LED/led.scala:11:{14,23}, :12:12, :13:{20,29}, :14:12, :15:{20,29}, :16:12, :17:{20,29}, :18:12, :19:{20,29}, :20:12, :21:{20,29}, :22:12, :23:{20,29}, :24:12, :25:{20,29}, :26:12, :27:{20,29}, :28:12, :29:{20,29}, :30:12, :31:{20,30}, :32:12, :33:{20,30}, :34:12, :35:{20,30}, :36:12, :37:{20,30}, :38:12, :39:30]
    casez (io_in)	// @[src/main/scala/LED/led.scala:11:{14,23}, :12:12, :13:{20,29}, :14:12, :15:{20,29}, :16:12, :17:{20,29}, :18:12, :19:{20,29}, :20:12, :21:{20,29}, :22:12, :23:{20,29}, :24:12, :25:{20,29}, :26:12, :27:{20,29}, :28:12, :29:{20,29}, :30:12, :31:{20,30}, :32:12, :33:{20,30}, :34:12, :35:{20,30}, :36:12, :37:{20,30}, :38:12, :39:30]
      4'b0000:
        casez_tmp = 7'h40;	// @[src/main/scala/LED/led.scala:11:{14,23}, :12:12, :13:{20,29}, :14:12, :15:{20,29}, :16:12, :17:{20,29}, :18:12, :19:{20,29}, :20:12, :21:{20,29}, :22:12, :23:{20,29}, :24:12, :25:{20,29}, :26:12, :27:{20,29}, :28:12, :29:{20,29}, :30:12, :31:{20,30}, :32:12, :33:{20,30}, :34:12, :35:{20,30}, :36:12, :37:{20,30}, :38:12, :39:30]
      4'b0001:
        casez_tmp = 7'h79;	// @[src/main/scala/LED/led.scala:11:{14,23}, :12:12, :13:{20,29}, :14:12, :15:{20,29}, :16:12, :17:{20,29}, :18:12, :19:{20,29}, :20:12, :21:{20,29}, :22:12, :23:{20,29}, :24:12, :25:{20,29}, :26:12, :27:{20,29}, :28:12, :29:{20,29}, :30:12, :31:{20,30}, :32:12, :33:{20,30}, :34:12, :35:{20,30}, :36:12, :37:{20,30}, :38:12, :39:30]
      4'b0010:
        casez_tmp = 7'h24;	// @[src/main/scala/LED/led.scala:11:{14,23}, :12:12, :13:{20,29}, :14:12, :15:{20,29}, :16:12, :17:{20,29}, :18:12, :19:{20,29}, :20:12, :21:{20,29}, :22:12, :23:{20,29}, :24:12, :25:{20,29}, :26:12, :27:{20,29}, :28:12, :29:{20,29}, :30:12, :31:{20,30}, :32:12, :33:{20,30}, :34:12, :35:{20,30}, :36:12, :37:{20,30}, :38:12, :39:30]
      4'b0011:
        casez_tmp = 7'h30;	// @[src/main/scala/LED/led.scala:11:{14,23}, :12:12, :13:{20,29}, :14:12, :15:{20,29}, :16:12, :17:{20,29}, :18:12, :19:{20,29}, :20:12, :21:{20,29}, :22:12, :23:{20,29}, :24:12, :25:{20,29}, :26:12, :27:{20,29}, :28:12, :29:{20,29}, :30:12, :31:{20,30}, :32:12, :33:{20,30}, :34:12, :35:{20,30}, :36:12, :37:{20,30}, :38:12, :39:30]
      4'b0100:
        casez_tmp = 7'h19;	// @[src/main/scala/LED/led.scala:11:{14,23}, :12:12, :13:{20,29}, :14:12, :15:{20,29}, :16:12, :17:{20,29}, :18:12, :19:{20,29}, :20:12, :21:{20,29}, :22:12, :23:{20,29}, :24:12, :25:{20,29}, :26:12, :27:{20,29}, :28:12, :29:{20,29}, :30:12, :31:{20,30}, :32:12, :33:{20,30}, :34:12, :35:{20,30}, :36:12, :37:{20,30}, :38:12, :39:30]
      4'b0101:
        casez_tmp = 7'h12;	// @[src/main/scala/LED/led.scala:11:{14,23}, :12:12, :13:{20,29}, :14:12, :15:{20,29}, :16:12, :17:{20,29}, :18:12, :19:{20,29}, :20:12, :21:{20,29}, :22:12, :23:{20,29}, :24:12, :25:{20,29}, :26:12, :27:{20,29}, :28:12, :29:{20,29}, :30:12, :31:{20,30}, :32:12, :33:{20,30}, :34:12, :35:{20,30}, :36:12, :37:{20,30}, :38:12, :39:30]
      4'b0110:
        casez_tmp = 7'h2;	// @[src/main/scala/LED/led.scala:11:{14,23}, :12:12, :13:{20,29}, :14:12, :15:{20,29}, :16:12, :17:{20,29}, :18:12, :19:{20,29}, :20:12, :21:{20,29}, :22:12, :23:{20,29}, :24:12, :25:{20,29}, :26:12, :27:{20,29}, :28:12, :29:{20,29}, :30:12, :31:{20,30}, :32:12, :33:{20,30}, :34:12, :35:{20,30}, :36:12, :37:{20,30}, :38:12, :39:30]
      4'b0111:
        casez_tmp = 7'h78;	// @[src/main/scala/LED/led.scala:11:{14,23}, :12:12, :13:{20,29}, :14:12, :15:{20,29}, :16:12, :17:{20,29}, :18:12, :19:{20,29}, :20:12, :21:{20,29}, :22:12, :23:{20,29}, :24:12, :25:{20,29}, :26:12, :27:{20,29}, :28:12, :29:{20,29}, :30:12, :31:{20,30}, :32:12, :33:{20,30}, :34:12, :35:{20,30}, :36:12, :37:{20,30}, :38:12, :39:30]
      4'b1000:
        casez_tmp = 7'h0;	// @[src/main/scala/LED/led.scala:11:{14,23}, :12:12, :13:{20,29}, :14:12, :15:{20,29}, :16:12, :17:{20,29}, :18:12, :19:{20,29}, :20:12, :21:{20,29}, :22:12, :23:{20,29}, :24:12, :25:{20,29}, :26:12, :27:{20,29}, :28:12, :29:{20,29}, :30:12, :31:{20,30}, :32:12, :33:{20,30}, :34:12, :35:{20,30}, :36:12, :37:{20,30}, :38:12, :39:30]
      4'b1001:
        casez_tmp = 7'h10;	// @[src/main/scala/LED/led.scala:11:{14,23}, :12:12, :13:{20,29}, :14:12, :15:{20,29}, :16:12, :17:{20,29}, :18:12, :19:{20,29}, :20:12, :21:{20,29}, :22:12, :23:{20,29}, :24:12, :25:{20,29}, :26:12, :27:{20,29}, :28:12, :29:{20,29}, :30:12, :31:{20,30}, :32:12, :33:{20,30}, :34:12, :35:{20,30}, :36:12, :37:{20,30}, :38:12, :39:30]
      4'b1010:
        casez_tmp = 7'h8;	// @[src/main/scala/LED/led.scala:11:{14,23}, :12:12, :13:{20,29}, :14:12, :15:{20,29}, :16:12, :17:{20,29}, :18:12, :19:{20,29}, :20:12, :21:{20,29}, :22:12, :23:{20,29}, :24:12, :25:{20,29}, :26:12, :27:{20,29}, :28:12, :29:{20,29}, :30:12, :31:{20,30}, :32:12, :33:{20,30}, :34:12, :35:{20,30}, :36:12, :37:{20,30}, :38:12, :39:30]
      4'b1011:
        casez_tmp = 7'h3;	// @[src/main/scala/LED/led.scala:11:{14,23}, :12:12, :13:{20,29}, :14:12, :15:{20,29}, :16:12, :17:{20,29}, :18:12, :19:{20,29}, :20:12, :21:{20,29}, :22:12, :23:{20,29}, :24:12, :25:{20,29}, :26:12, :27:{20,29}, :28:12, :29:{20,29}, :30:12, :31:{20,30}, :32:12, :33:{20,30}, :34:12, :35:{20,30}, :36:12, :37:{20,30}, :38:12, :39:30]
      4'b1100:
        casez_tmp = 7'h46;	// @[src/main/scala/LED/led.scala:11:{14,23}, :12:12, :13:{20,29}, :14:12, :15:{20,29}, :16:12, :17:{20,29}, :18:12, :19:{20,29}, :20:12, :21:{20,29}, :22:12, :23:{20,29}, :24:12, :25:{20,29}, :26:12, :27:{20,29}, :28:12, :29:{20,29}, :30:12, :31:{20,30}, :32:12, :33:{20,30}, :34:12, :35:{20,30}, :36:12, :37:{20,30}, :38:12, :39:30]
      4'b1101:
        casez_tmp = 7'h21;	// @[src/main/scala/LED/led.scala:11:{14,23}, :12:12, :13:{20,29}, :14:12, :15:{20,29}, :16:12, :17:{20,29}, :18:12, :19:{20,29}, :20:12, :21:{20,29}, :22:12, :23:{20,29}, :24:12, :25:{20,29}, :26:12, :27:{20,29}, :28:12, :29:{20,29}, :30:12, :31:{20,30}, :32:12, :33:{20,30}, :34:12, :35:{20,30}, :36:12, :37:{20,30}, :38:12, :39:30]
      4'b1110:
        casez_tmp = _GEN;	// @[src/main/scala/LED/led.scala:11:{14,23}, :12:12, :13:{20,29}, :14:12, :15:{20,29}, :16:12, :17:{20,29}, :18:12, :19:{20,29}, :20:12, :21:{20,29}, :22:12, :23:{20,29}, :24:12, :25:{20,29}, :26:12, :27:{20,29}, :28:12, :29:{20,29}, :30:12, :31:{20,30}, :32:12, :33:{20,30}, :34:12, :35:{20,30}, :36:12, :37:{20,30}, :38:12, :39:30, :40:12, :42:12]
      default:
        casez_tmp = _GEN;	// @[src/main/scala/LED/led.scala:11:{14,23}, :12:12, :13:{20,29}, :14:12, :15:{20,29}, :16:12, :17:{20,29}, :18:12, :19:{20,29}, :20:12, :21:{20,29}, :22:12, :23:{20,29}, :24:12, :25:{20,29}, :26:12, :27:{20,29}, :28:12, :29:{20,29}, :30:12, :31:{20,30}, :32:12, :33:{20,30}, :34:12, :35:{20,30}, :36:12, :37:{20,30}, :38:12, :39:30, :40:12, :42:12]
    endcase	// @[src/main/scala/LED/led.scala:11:{14,23}, :12:12, :13:{20,29}, :14:12, :15:{20,29}, :16:12, :17:{20,29}, :18:12, :19:{20,29}, :20:12, :21:{20,29}, :22:12, :23:{20,29}, :24:12, :25:{20,29}, :26:12, :27:{20,29}, :28:12, :29:{20,29}, :30:12, :31:{20,30}, :32:12, :33:{20,30}, :34:12, :35:{20,30}, :36:12, :37:{20,30}, :38:12, :39:30]
  end // always_comb
  assign io_out = casez_tmp;	// @[src/main/scala/LED/led.scala:6:7, :11:23, :12:12, :13:29]
endmodule

module top(	// @[src/main/scala/top.scala:7:7]
  input        clock,	// @[src/main/scala/top.scala:7:7]
               reset,	// @[src/main/scala/top.scala:7:7]
  input  [2:0] io_control,	// @[src/main/scala/top.scala:8:14]
  input  [7:0] io_seed,	// @[src/main/scala/top.scala:8:14]
  output [7:0] io_out,	// @[src/main/scala/top.scala:8:14]
  output [6:0] io_outSeg0,	// @[src/main/scala/top.scala:8:14]
               io_outSeg1	// @[src/main/scala/top.scala:8:14]
);

  wire [7:0] _LFSR_io_out;	// @[src/main/scala/top.scala:16:20]
  LFSR LFSR (	// @[src/main/scala/top.scala:16:20]
    .clock      (clock),
    .reset      (reset),
    .io_control (io_control),
    .io_seed    (io_seed),
    .io_out     (_LFSR_io_out)
  );	// @[src/main/scala/top.scala:16:20]
  led LED0 (	// @[src/main/scala/top.scala:20:20]
    .io_in  (_LFSR_io_out[3:0]),	// @[src/main/scala/top.scala:16:20, :21:23]
    .io_out (io_outSeg0)
  );	// @[src/main/scala/top.scala:20:20]
  led LED1 (	// @[src/main/scala/top.scala:23:20]
    .io_in  (_LFSR_io_out[7:4]),	// @[src/main/scala/top.scala:16:20, :24:23]
    .io_out (io_outSeg1)
  );	// @[src/main/scala/top.scala:23:20]
  assign io_out = _LFSR_io_out;	// @[src/main/scala/top.scala:7:7, :16:20]
endmodule

